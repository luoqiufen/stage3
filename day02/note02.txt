git命令:
    1.查看提交信息
        git log

        补充:
            1) git add xxx xxx xxx
                一次性暂存多个文件
            2) git add -A
                一次性暂存工作区所有有修改的文件
            3) git commit -a
                跳过暂存,直接提交(untracked除外)
            4) git add 目录名
                暂存指定目录下所有修改的文件

        git log --pretty=oneline

    2.取消修改
        1) 取消工作区的修改
            文件被修改后还没有执行git add命令
            git checkout -- 文件名
            取消到上一次提交的情况
        2) 取消暂存区的修改
            文件被修改后执行了git add命令,但是还没有执行git commit命令
            先撤销git add命令
                git reset HEAD 文件名
            然后再撤销工作区的修改
                git checkout -- 文件名
        3) 取消分支区的修改
            文件被修改后执行了git add 和 git commit命令(已经提交了)
            无法取消修改
            使用版本回退
            首先,先使用git log查看每次提交的id,然后确定需要回退到哪个版本
            再使用: git reset --hard id 

    关于HEAD
        就是一个存盘点,实现版本控制
        git在将每一次的提交传承一条时间线,这条时间线就称为分支
        默认只有一条分支,master,也称之为主分支,而HEAD指向的就是当前分支

        1) 创建分支
            git branch v1
            将当前所在分支复制一条出来,起名为v1
        2) 查看当前仓库有哪些分支
            git branch
            前面有*的表示当前所在分支

        3) 切换分支
            git checkout 分支名
            在一条分支上的修改不会影响到其他分支上的内容

        4) 分支的合并
            git merge 分支名称
            将制定名称上分支的修改合并到当前分支上
            在master上使用git merge v2
            将v2的修改合并到master上,v2的内容不会变化,master的内容发生变化

        5) 分支的删除
            git branch -d 分支名
            删除指定分支
            如果分支没有被合并,则删除失败,可以强制删除
            git branch -D 分支名
            不能删除当前所在分支
            

github的使用
    https://github.com

    1.注册登录
        邮箱验证

    2.创建远程仓库
        右上角 + 选择new repository
        在repository name中填写远程仓库的名称
        其他都不管

    3.选择https模式
        在命令中运行
            git remote add origin 远程仓库地址
            作用: 添加远程关联
            git remote 是固定语法
            add 添加
            origin 别名 指代后面远程仓库的地址
        再运行
            git push -u origin master
            作用: 将本地仓库的内容推送到远程仓库
            git push
            -u 第一次推送时添加,之后就不需要了
                如果没有master分支就创建
            origin 别名,指代添加远程关联时的地址
            master 推送的分支

    4. 查看当前仓库有哪些远程关联
        git remote

    5. 删除已经存在的远程关联
        git remote remove 关联名称

    6.HTTPS和SSH
        HTTPS每次推送都需要输入用户名和密码

        SSH需要配置密钥,配置成功后推送就不需要用户名和密码了

    输入命令
        ls -a ~/.ssh查看本机有没有密钥
    创建密钥
        ssh-keygen -t rsa -C "邮箱地址"

    配置密钥:
        打开id_rsa.pub复制其中的内容
        点击github头像-->settings-->SSH And GPGKeys
        -->Add SSH
        -->Title随便写，将复制的内容粘贴进Key
        -->Add SSH Key
        注：本地的.ssh不能删除

    视图界面工具的使用 GUI

    补充: 从github上下载代码
        1.clone --> download Zip
        2.git clone 命令
            git clone 远程仓库地址
            该命令会将指定远程仓库完整的克隆下来,包括历史信息,而且还会自动添加远程关联

            git clone -b 分支名 远程仓库地址
            克隆指定分支

            clone 所有分支：
            　  · git clone 仓库地址   
                · git branch -r / git branch -a
                · git checkout 分支名


        3.git pull origin master   
            将远程仓库的master分支上的修改拉取下来

        一般情况下,第一次下载时使用git clone
        以后同步代码就只使用 git pull 和 git push

    

   
github上git提交分支的命令

    git config配置本地仓库

    常用git config --global user.name、git config --global user.email

    git config --list查看配置详情

    git init 初始一个仓库，添加--bare可以初始化一个共享（裸）仓库

    git status 可以查看当前仓库的状态

    git add“文件” 将工作区中的文件添加到暂存区中，其中file可是一个单独的文件，也可以是一个目录、“*”、-A

    git commit -m '备注信息' 将暂存区的文件，提交到本地仓库

    git log 可以查看本地仓库的提交历史

    git branch查看分支

    git branch“分支名称” 创建一个新的分支

    git checkout“分支名称” 切换分支

    git checkout -b deeveloper 他健并切到developer分支

    git merge“分支名称” 合并分支

    git branch -d “分支名称” 删除分支

    git clone “仓库地址”获取已有仓库的副本

    git push origin “本地分支名称:远程分支名称”将本地分支推送至远程仓库，

    git push origin hotfix（通常的写法）相当于

    git push origin hotfix:hotfix

    git push origin hotfix:newfeature

    本地仓库分支名称和远程仓库分支名称一样的情况下可以简写成一个，即git push “仓库地址” “分支名称”，如果远程仓库没有对应分支，将会自动创建

    git remote add “主机名称” “远程仓库地址”添加远程主机，即给远程主机起个别名，方便使用

    git remote 可以查看已添加的远程主机

    git remote show “主机名称”可以查看远程主机的信息

    在项目开发过程中，经常性的会遇到远程（共享）仓库和本地仓库不一致，我们可以通过git fetch 命令来更新本地仓库，使本地仓库和远程（共享）仓库保持一致。

    git fetch  “远程主机”

    或者 

    git fetch “远程主机” “分支名称”

    我们要注意的是，利用git fetch 获取的更新会保存在本地仓库中，但是并没有体现到我们的工作目录中，需要我们再次利用git merge来将对应的分支合并（融合）到特定分支。如下 

    git pull origin 某个分支， 上操作相当于下面两步

    git fetch

    git merge origin/某个分支

    
    问题：如何查看远程主机上总共有多少个分支？
    
    git branch -a 便可以查看所有(本地+远程仓库)分支了

    删除远程分支git push origin --delete 分支名称